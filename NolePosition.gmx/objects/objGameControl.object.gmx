<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-1000</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Setup global variables

// Get persistent stats from objPersistentStats
with (objPersistentStats) {

  // Set level
  global.level = level;
}
//Number of seconds for each tick, based on level and local levelAdjustment variable
var levelAdjustment = 0.93;//0.94;
global.tickSpeed = 1 * (power(levelAdjustment, (global.level  - 1)));

//Speed of flashes (when player gets hit), in seconds
global.flashSpeed = 0.25;

// Maximum value of bottom X of grid
global.gridMax = 4;

// Lives
lives = 4;

global.numTicks = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Control randomization

//Uncomment for "real" randomness, comment to see same results each time
randomize();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start timers

alarm[0] = global.tickSpeed * room_speed;
alarm[1] = global.tickSpeed * 1.5 * room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Create level markers

// In case we change some widths
var w = 64;
var beginning = (view_wview[1] - w * 12) / 2;

// 1/2 of the sprite width
beginning += 27;

// Create 12 level markers
for (var i = 0; i &lt; 12; ++i) {
  
  instance_create(beginning + (i * w), 32, objLevelMarker);

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Setup a container for the enemies in each row

enemies[0,0] = 0;
enemies[0,1] = 0;
enemies[0,2] = 0;

enemies[1,0] = 0;
enemies[1,1] = 0;
enemies[1,2] = 0;
enemies[1,3] = 0;

enemies[2,0] = 0;
enemies[2,1] = 0;
enemies[2,2] = 0;
enemies[2,3] = 0;
enemies[2,4] = 0;

enemies[3,0] = 0;
enemies[3,1] = 0;
enemies[3,2] = 0;
enemies[3,3] = 0;
enemies[3,4] = 0;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// spawn background sprites

if (instance_number(objField) == 0) {
    instance_create(512, 300, objField);
}

if (instance_number(objGoalPost) == 0) {
    instance_create(512, 134, objGoalPost);
}

if (instance_number(objHandheld) == 0) { 
    instance_create(512 + 1124, 300, objHandheld);
}

if (instance_number(objScratches) == 0) { 
    instance_create(512 + 2248, 300, objScratches);
}

if (instance_number(objPlayerTouchdown) == 0) { 
    instance_create(340, 161, objPlayerTouchdown);
}

if (instance_number(objOsceola) == 0) { 
    instance_create(700, 140, objOsceola);
}

if (instance_number(objFootballs) == 0) { 
    instance_create(512, 140, objFootballs);
}

if (instance_number(objYardLines) == 0) { 
    instance_create(512, 315, objYardLines);
}

if (instance_number(objGameOver) == 0) {
  instance_create(773, 107, objGameOver);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Spawn player

instance_create(0, 0, objPlayer);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///sound controllers

isCrash = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize font stuff

draw_set_font(fntScoreboard);
draw_set_halign(fa_center);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>0</libid>
        <id>0</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>0</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Restarts room

with (objGoalPost) {
  image_index = 0;
}

room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Offbeat timer (for offbeat sounds, etc.)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adjust player sprite

with (objPlayer) {
  image_index = abs(image_index - 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Reset alarm

alarm[1] = global.tickSpeed * room_speed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Make offbeat noise

audio_play_sound(sndHalfBeep, 10, false);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main tick

if (alarm[0] &gt; -5) {
  alarm[0] = global.tickSpeed * room_speed;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Temporary box change color (turned off right now, objTempBox does not exist)
/*with (objTempBox){ 
  color = make_color_rgb(irandom(255),irandom(255),irandom(255));
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move enemies down

// Start with any in the bottom row (3)

for (var i = 0; i &lt; 5; ++i) {
  
  if (enemies[3, i] != 0) {
    with (enemies[3,i]) {
      instance_destroy();
    }
    enemies[3, i] = 0;
  }
}
  
// Then do row 2
 
for (var i = 0; i &lt; 5; ++i) {
  if (enemies[2, i] != 0) {
    var e = enemies[2, i];
    scrMoveEnemy(e, enemies);
    enemies[e.gridY, e.gridX] = e;
    enemies[2, i] = 0;
  }
} 
 
// Then do row 1

for (var i = 0; i &lt; 4; ++i) {
  if (enemies[1, i] != 0) {
    var e = enemies[1, i];
    scrMoveEnemy(e, enemies);
    enemies[e.gridY, e.gridX] = e;
    enemies[1, i] = 0;
  }
} 

// Then do row 0 (the top row)

for (var i = 0; i &lt; 3; ++i) {
  if (enemies[0, i] != 0) {
    var e = enemies[0, i];
    scrMoveEnemy(e, enemies);
    enemies[e.gridY, e.gridX] = e;
    enemies[0, i] = 0;
  }
} 

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn enemies, possibly

var r = irandom(6);

// Hack to make "4" create 2 enemies
if (r == 4) {
  r = 2;
}

//Makes it so it only spawns enemies about half the time, with a max of 3
if (r &gt; 3) {
  r = 0;
}

// ALWAYS spawn enemies when there are none on the screen
if (instance_number(objEnemy) == 0) {
  r = irandom(2) + 1;
}

//Spawn the enemies
for (var i = 0; i &lt; r; ++i) {
  var e = scrSpawnEnemy(enemies);
  enemies[e.gridY, e.gridX] = e;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adjust player sprite

with (objPlayer) {
  image_index = abs(image_index - 1);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for collision

var playerX;

with (objPlayer) {
  playerX = gridX;
}

if (enemies[3, playerX] != 0) {
  scrCollision();
} else {
  for (var i = 0; i &lt; 5; ++i) {
    if (enemies[3, i] != 0) {
      e = enemies[3, i];
      with (e) {
        instance_destroy();
      }
      enemies[3, i] = 0;
    }
   
  }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adjust score

score += 1 * global.level;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Adjust number of ticks on this level up
global.numTicks++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Change level

var totalTicksToFinishLevel = 24 + (objPersistentStats.level);  //35
if (global.numTicks % totalTicksToFinishLevel == 0) {

    score += lives * 10;

    // Set level in persistent object
    with (objPersistentStats) {
    
      score += consecutive * 10;
      if (lives == 4) {
        consecutive += 1;
      } else {
        consecutive = 0;
      }
    
      // If not on last level, advance level
      if (level &gt; 0) {  
        level++;
        lives = 4;
        with (objGoalPost) {
          image_index = 1;
        }
        with (objEnemy) {
          instance_destroy();
        }
        with (objPlayer) {
          instance_destroy();
        }
        audio_play_sound(sndBeatLevel, 15, false);
       
       with (objYardLines) {
        instance_destroy();
       }
        
       // Restarts room
       other.alarm[2] = audio_sound_length(sndBeatLevel) * room_speed; 
       other.alarm[0] = -5;
       other.alarm[1] = -5;
       
       //instance_create(340, 161, objPlayerTouchdown);
       with (objPlayerTouchdown) {
         sprite_index = sprTDPlayer;
       }
       
       with (objOsceola) {
         sprite_index = sprOsceola;
       }

       with (objFootballs) {
         sprite_index = sprFootballs;
       }
              
       instance_create(512, 240, objEndzone);
       
      } else {
          // Otherwise, end game successfully somehow
          
          //show_message("You win the game!");
          with (objGoalPost) {
            image_index = 1;
          }
          with (objEnemy) {
            instance_destroy();
          }
          
          with (objPlayer) {
            instance_destroy();
          }
          
          with (objGameOver) {
            sprite_index = sprGameOver;
          }
          audio_play_sound(sndBeatGame, 15, false);
          //level = 1;
          //lives = 4;  
          //score = 0; 
      
         // Restarts room
         //other.alarm[2] = audio_sound_length(sndBeatGame) * room_speed; 
         other.alarm[0] = -5;  
         other.alarm[1] = -5;          
      }
    }
   

}


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Make sound

// Play appropriate sound


audio_play_sound(sndBasicBeep, 10, false);



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change yard lines

with (objYardLines) {
  image_index = abs(image_index - 1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for Sound button press

if(scrIsSoundButtonPressed()) {
  show_debug_message("Sound button pressed.");
  scrToggleSound();
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Check for Start button press (off)

if(scrIsStartButtonPressed()) {
  show_debug_message("Start button pressed, turning off.");
  with (objPersistentStats) {
    level = 1;
  }
  score = 0;
  lives = 4;
  audio_stop_all();
  room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw down

draw_text(120, 60, string(min(4, 5 - lives)));
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draw score

draw_text(view_wview[1] - 120, 60, string(score));
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
